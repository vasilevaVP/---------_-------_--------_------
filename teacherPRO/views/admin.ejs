<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://db.onlinewebfonts.com/c/4674c29fede917b1695c03e730aa503c?family=TraktorMoodFont"
        rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Geologica:wght@100..900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="./css/rest.css">
    <link rel="stylesheet" href="./css/style.css">
    <title>Админ-панель</title>
    <link rel="icon" href="./img/iconlogo.ico">
    <style>
        body {
            font-family: Geologica;
            background-color: #f4f4f4;
            display: flex;
            flex-direction: column;
            align-items: center;
            height: 100vh;
            margin: 0;
        }

        .admin-container {
            background-color: #fff;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            width: 80%;
            max-width: 800px;
            margin-top: 20px;
        }
      .form-section {
            margin-bottom: 20px;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }

        .admin-container h1 {
            font: 600 40px Geologica;
            text-align: center;
            margin-bottom: 40px;
            color: #333;
        }
        .admin-container h2 {
            font: 500 32px Geologica;
            text-align: center;
            margin: 0;
            margin-bottom: 20px;
            color: #333;
        }

        .admin-container p {
            font: 300 20px Geologica;
            font-size: 1.1em;
            color: #555;
            margin-bottom: 15px;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            color: #555;
        }

        .form-group input,
        .form-group textarea,
        .form-group select {
            width: calc(100% - 20px);
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .button-container{
            display: flex;
            justify-content: flex-end;
        }
        .button-container button {
            padding: 10px 15px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .button-container button:hover {
            background-color: #0056b3;
        }
        .message {
            margin-top: 10px;
            padding: 10px;
            border-radius: 5px;
        }

        .success {
            background-color: #d4edda;
            color: #155724;
        }
        .error {
            background-color: #f8d7da;
            color: #721c24;
        }
        .close {
            color: #606060;
            float: left;
            font: 300 15px Geologica;
            margin-top: 20px;
        }
        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
        .preview-container {
            margin-top: 10px;
            max-width: 200px;
            max-height: 200px;
        }
        .preview-container img{
            max-width: 200px;
            max-height: 200px;
        }
        .user-list {
            width: 80%;
            margin: 20px auto;
            border: 1px solid #ddd;
            padding: 20px;
        }

        .user-list table {
            width: 100%;
            border-collapse: collapse;
        }

        .user-list th,
        .user-list td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: left;
        }
        .message {
    padding: 10px;
    margin-bottom: 10px;
  }
  .message.success {
    background-color: #d4edda;
    border: 1px solid #c3e6cb;
  }
  .message.error {
    background-color: #f8d7da;
    border: 1px solid #f5c6cb;
  }
         
    </style>
</head>
<body>
    <a href="/index"><span class="close" id="closeConfirm">← На главную</span></a>
    <div class="admin-container">
         <h1>Админ панель</h1>
            <% if (user) { %>
            <p>Добро пожаловать, <%= user.fullName %>! <a href="/logout">Выйти</a></p>
            <% } else { %>
            <p>Вы не авторизованы.</p>
            <p><a href="/login">Авторизоваться</a></p>
            <% } %>
            <div id="developments" class="tab-content active">
    
                  <div class="form-section">
                    <h2>Добавить тег</h2>
                     <div id="tagMessage"></div>
                        <div class="form-group">
                            <label for="tagName">Название тега:</label>
                            <input type="text" id="tagName" name="tagName" required>
                       </div>
                     <div class="button-container">
                        <button onclick="addTag()">Добавить тег</button>
                    </div>
                 </div>
                 <div class="form-section">
                   <h2>Добавить категорию</h2>
                     <div id="categoryMessage"></div>
                     <div class="form-group">
                          <label for="categoryName">Название категории:</label>
                          <input type="text" id="categoryName" name="categoryName" required>
                     </div>
                     <div class="button-container">
                        <button onclick="addCategory()">Добавить категорию</button>
                     </div>
                </div>
                 <div class="form-section">
                    <h2>Добавить разработку</h2>
                    <form id="addDevelopmentForm" method="post" enctype="multipart/form-data">
                        <div class="form-group">
                            <label for="developmentTitle">Название разработки:</label>
                            <input type="text" id="developmentTitle" name="title" required>
                        </div>
                        <div class="form-group">
                            <label for="developmentDescription">Описание:</label>
                            <textarea id="developmentDescription" name="description" rows="4"></textarea>
                        </div>
                        <div class="form-group">
                            <label for="developmentFile">Файл разработки:</label>
                              <input type="file" id="developmentFile" name="file_path" accept=".pdf,.docx,.pptx,.mp4" required>
                          </div>
                        <div class="form-group">
                           <label for="developmentPreview">Превью:</label>
                              <input type="file" id="developmentPreview" name="preview" accept=".jpg,.jpeg,.png"  required onchange="previewImage(event)">
                        </div>
                        <div class="preview-container">
                            <img id="preview-img" src="#" alt="Превью" style="display:none;">
                        </div>
                        <div class="form-group">
                            <label for="developmentCategoryId">Категория:</label>
                            <select id="developmentCategoryId" name="category_id" required></select>
                        </div>
                        <div id="tagsContainer"></div>
                        <div id="errorContainer" class="error-message"></div>
                      <button type="submit">Загрузить</button>
                    </form>
                    <div id="developmentMessage"></div>
                  </div>
                    </div>
                <div class="form-section">
                    <h2>Редактировать и удалить разработки</h2>
                    <div id="developmentsList">
                    </div>
                </div> 
                <div id="users" class="tab-content">
               <div class="form-section">
                   <h2>Список пользователей</h2>
                   <p>Всего пользователей: <%= userCount %></p>
                      <div class="user-list">
                           <table>
                                <tr>
                                     <th>ID</th>
                                    <th>ФИО</th>
                                     <th>Почта</th>
                               </tr>
                               <% if(users) {
                                  users.forEach(user => { %>
                                      <tr>
                                           <td><%= user.id %></td>
                                           <td><%= user.fullName %></td>
                                         <td><%= user.email %></td>
                                      </tr>
                                      <% });
                                  }
                               %>
                           </table>
                     </div>
               </div>
             </div>
            </div>
           

        <script>
        const categorySelect = document.getElementById('developmentCategoryId');
        const tagCheckboxes = document.getElementById('tagCheckboxes');
         const previewImg = document.getElementById('preview-img');
          const developmentsListContainer = document.getElementById('developmentsList');
        const tabContents = document.querySelectorAll('.tab-content');
        const tabButtons = document.querySelectorAll('.tab-button');

        async function fetchCategories() {
           try {
                const response = await fetch('/admin/categories');
                if (!response.ok) {
                  throw new Error('Failed to fetch categories');
                }
                const categories = await response.json();
                 categories.forEach(category => {
                    const option = document.createElement('option');
                    option.value = category.id;
                   option.text = category.name;
                    categorySelect.appendChild(option);
                });
           } catch (error) {
                console.error('Ошибка при получении категорий:', error);
            }
        }

        async function fetchTags() {
            try {
                const response = await fetch('/admin/tags');
                if (!response.ok) {
                    throw new Error('Failed to fetch tags');
               }
               const tags = await response.json();
                  tags.forEach(tag => {
                     const checkbox = document.createElement('input');
                    checkbox.type = 'checkbox';
                   checkbox.value = tag.id;
                    checkbox.name = 'tags';
                    checkbox.id = `tag-${tag.id}`;
                   const label = document.createElement('label');
                   label.htmlFor = `tag-${tag.id}`;
                   label.textContent = tag.name;
                    const div = document.createElement('div');
                    div.appendChild(checkbox);
                    div.appendChild(label);
                    tagCheckboxes.appendChild(div);
                  });
              } catch (error) {
                 console.error('Ошибка при получении тегов:', error);
            }
        }
       fetchCategories();
        fetchTags();

             async function addTag() {
                const tagName = document.getElementById('tagName').value.trim();
                const tagMessage = document.getElementById('tagMessage');
                  try {
                    const response = await fetch('/admin/add/tag', {
                        method: 'POST',
                        headers: {
                          'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ name: tagName }),
                    });
                 const data = await response.json();
                if (response.ok) {
                     tagMessage.innerHTML = `<div class="message success">Тег "${data.tag.name}" успешно добавлен</div>`;
                       document.getElementById('tagName').value = '';
                } else {
                     tagMessage.innerHTML = `<div class="message error">${data.error}</div>`;
                }
                  setTimeout(() => tagMessage.innerHTML = "", 5000);
               } catch (error) {
                    console.error('Ошибка при добавлении тега:', error);
                   tagMessage.innerHTML = `<div class="message error">Ошибка сервера. Попробуйте позже.</div>`;
                   setTimeout(() => tagMessage.innerHTML = "", 5000);
             }
             }
             async function addCategory() {
                 const categoryName = document.getElementById('categoryName').value.trim();
                const categoryMessage = document.getElementById('categoryMessage');
                try {
                     const response = await fetch('/admin/add/category', {
                        method: 'POST',
                         headers: {
                          'Content-Type': 'application/json',
                        },
                       body: JSON.stringify({ name: categoryName }),
                  });
                 const data = await response.json();
                    if (response.ok) {
                        categoryMessage.innerHTML = `<div class="message success">Категория "${data.category.name}" успешно добавлена</div>`;
                         document.getElementById('categoryName').value = '';
                   } else {
                     categoryMessage.innerHTML = `<div class="message error">${data.error}</div>`;
                  }
                setTimeout(() => categoryMessage.innerHTML = "", 5000);
             } catch (error) {
                 console.error('Ошибка при добавлении категории:', error);
                  categoryMessage.innerHTML = `<div class="message error">Ошибка сервера. Попробуйте позже.</div>`;
                setTimeout(() => categoryMessage.innerHTML = "", 5000);
               }
             }
             document.getElementById('addDevelopmentForm').addEventListener('submit', async function(event) {
        event.preventDefault();
          document.getElementById('errorContainer').textContent = '';
          const formData = new FormData(this);

        try {
            const response = await fetch('/admin/add/development/step1', {
              method: 'POST',
               body: formData,
            });
           if (!response.ok) {
               const errorData = await response.json();
              throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
            }
              const data = await response.json();
             if (data.success) {
                  document.getElementById('tagsContainer').innerHTML = data.tagsHtml;
                 this.action = `/admin/add/development/step2/${data.developmentId}`;
                  this.removeEventListener('submit', arguments.callee);
               this.addEventListener('submit', async function (event) {
                    event.preventDefault();
                    const formData2 = new FormData(this);
                  try {
                    const response2 = await fetch(this.action, {
                        method: 'POST',
                         body: formData2,
                    });
                     if (!response2.ok) {
                      const errorData2 = await response2.json();
                          throw new Error(errorData2.error || `HTTP error! status: ${response2.status}`);
                        }
                       const data2 = await response2.json();
                        if(data2.success) {
                            window.location.href = data2.redirect;
                        }
                     } catch (error) {
                       console.error('Ошибка при добавлении разработки:', error);
                       document.getElementById('errorContainer').textContent = error.message;
                     }
               });
             } else {
                  document.getElementById('errorContainer').textContent =  data.error
              }
           } catch (error) {
                console.error('Ошибка при добавлении разработки:', error);
                document.getElementById('errorContainer').textContent = error.message;
            }
     });
            function previewImage(event) {
                const file = event.target.files[0];
                 if (file) {
                     previewImg.src = URL.createObjectURL(file);
                    previewImg.style.display = 'block';
                } else {
                    previewImg.style.display = 'none';
                   previewImg.src = '#';
               }
            }
        function openTab(tabId) {
                    tabContents.forEach(tab => {
                         tab.classList.remove('active');
                      });
                    tabButtons.forEach(button => {
                       button.classList.remove('active');
                     });
                  document.getElementById(tabId).classList.add('active');
                    document.querySelector(`[onclick="openTab('${tabId}')"]`).classList.add('active');
             }

             
        </script>
</body>
</html>